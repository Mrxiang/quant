# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TableWidgetMainView.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QLineEdit, QComboBox, QCheckBox
from PyQt5.QtCore import *
import Utils
from AddDialog import AddStockDialog
import tushare as ts
import pandas as pd
from Utils import  *

class Ui_MainWindow(object):
    updateSignal = pyqtSignal(object)  #pyqt5信号要定义为类属性

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit.setObjectName("dateEdit")
        self.horizontalLayout.addWidget(self.dateEdit)
        self.timeEdit = QtWidgets.QTimeEdit(self.centralwidget)
        self.timeEdit.setObjectName("timeEdit")
        self.horizontalLayout.addWidget(self.timeEdit)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.horizontalLayout_2.addWidget(self.tableWidget)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 27))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.initTableWidget()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "貔貅"))
        self.pushButton.setText(_translate("MainWindow", "增加"))
        self.pushButton_2.setText(_translate("MainWindow", "删除"))
        self.pushButton_3.setText(_translate("MainWindow", "开始无人值守"))
        self.pushButton_4.setText(_translate("MainWindow", "停止无人值守"))

        self.pushButton.clicked.connect( self.addDialogShow)
        self.pushButton_2.clicked.connect( self.delete)
        self.pushButton_3.clicked.connect( self.startUnattend )
        self.pushButton_4.clicked.connect( self.stopUnattend  )


    def initTableWidget(self):
        print("填入数据")
        # model = PandasModel( DBManager().read_df())
        # self.tableWidget.setModel( model )
        try:
            self.df= pd.read_csv(Utils.realstock_csv)
        except Exception as e:
            print(e)
            self.df = pd.DataFrame(columns=Utils.column)
            self.df.to_csv(Utils.realstock_csv, index=False)
        table_rows = self.df.shape[0]
        table_columns= self.df.shape[1]
        input_table_header = self.df.columns.values.tolist()
        # 设置表格列数
        self.tableWidget.setColumnCount(table_columns)
        # 设置表格行数
        self.tableWidget.setRowCount(table_rows)
        # 给tablewidget设置行列表头========================
        self.tableWidget.setHorizontalHeaderLabels(input_table_header)
        # 水平方向标签拓展剩下的窗口部分，填满表格
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # 水平方向，表格大小拓展到适当的尺寸
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        for row in range(table_rows):
            for col in range(table_columns):
                if col in [1,2]:
                    tableItem = QTableWidgetItem()
                    tableItem.setTextAlignment(Qt.AlignHCenter|Qt.AlignVCenter )
                    tableItem.setFlags( Qt.ItemIsEditable )
                    tableItem.setText( str(self.df.loc[row][col]))
                if col in [7,8,9,10]:
                    # lineEdit= QLineEdit()
                    # lineEdit.setText( str(self.df.loc[row][col]) )
                    # lineEdit.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                    # lineEdit.editingFinished.connect( self.itemEdit )
                    # self.tableWidget.setCellWidget(row, col, lineEdit)
                    lineEdit = QTableWidgetItem()
                    lineEdit.setTextAlignment(Qt.AlignHCenter|Qt.AlignVCenter )
                    # lineEdit.setFlags( Qt.ItemIsEditable )
                    lineEdit.setText( str(self.df.loc[row][col]))
                    self.tableWidget.setItem( row, col, lineEdit)
                elif  col in [11]:
                    comBox = QComboBox()
                    comBox.addItems(["买入", "卖出","先买后卖","先卖后买"])
                    self.tableWidget.setCellWidget(row, col, comBox)

                elif col in [13]:
                    # checkBox = QCheckBox()
                    # self.tableWidget.setCellWidget(row, col, checkBox)
                    checkBox = QTableWidgetItem()
                    checkBox.setCheckState(QtCore.Qt.Unchecked)
                    self.tableWidget.setItem(row, col, checkBox)
                    # self.connect(self.tableWidget, QtCore.SIGNAL("itemClicked(QTableWidgetItem*)"), self.itemChecked)
                else:
                    newItem = QTableWidgetItem(str(self.df.loc[row][col]))
                    newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                    self.tableWidget.setItem( row, col, newItem)


    def updateTableWidget(self, data):
        print("更新表格")
        print( data.shape, data )
        # self.setItem(0, 0, QTableWidgetItem(data))  # 设置表格内容(行， 列) 文字
        self.df= pd.read_csv(Utils.realstock_csv)
        table_rows = self.df.shape[0]
        table_columns= self.df.shape[1]
        self.tableWidget.setColumnCount(table_columns)
        # 设置表格行数
        self.tableWidget.setRowCount(table_rows)


        for row in range(data.shape[0]):
            for col in range( 2,7):
                newItem = QTableWidgetItem(str(data.loc[row][col]))
                newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                self.tableWidget.setItem( row, col, newItem)

    def itemEdit(self):
        print("编辑了")

    def itemChecked(self, QTableWidgetItem):
        print("勾选了 ")

    def addDialogShow(self):
        print("点击了add")
        self.addDialog = AddStockDialog()
        self.addDialog.addStockSignal.connect( self.addStock)
        self.addDialog.show()
    def addStock(self, df ):
        print("增加了", df )
        self.df=self.df.append(df)
        self.df.to_csv( Utils.realstock_csv,index=False )
        print("保存到csv")

    def delete(self):
        print("点击了删除")
        row = self.tableWidget.currentRow()
        print(row)
        self.tableWidget.removeRow(row)
        self.df.drop(labels=row, inplace=True)
        self.df.to_csv(Utils.realstock_csv, index=False)

    def startUnattend(self):
        print("开启无人值守")

    def stopUnattend(self):
        print("停止无人值守")


    def startRealTime(self):
        print("开启实时监测")
        self.dateEdit.setDate( QDate.currentDate())
        self.timeEdit.setTime( QTime.currentTime())
        self.updateSignal.connect(self.updateTableWidget )
        global  timer
        timer =threading.Timer(1, self.realtdata_timer)
        timer.start()

    def realtdata_timer(self):
        print("每秒钟运行检测")
        # self.dateEdit.setDate( QDate.currentDate())
        # self.timeEdit.setTime(QTime.currentTime())
        self.df=pd.read_csv(Utils.realstock_csv)
        self.colum = [str(x) for x in self.df['code'].tolist()]
        print(self.colum)
        try:
            realData = ts.get_realtime_quotes(self.colum)
            realData=realData[['code','name', 'open','pre_close','price','high','low']]
            print("实时数据",realData)
        except Exception as e:
            print(e)
        self.updateSignal.emit( realData)  # 发射信号
        global  timer
        timer =threading.Timer(1, self.realtdata_timer)
        timer.start()
    def stopRealTime(self):
        print("停止实时监测")
        timer.cancel()

    def  closeEvent(self, event):
        print("退出主窗口")
        self.stopRealTime()
        self.df.to_csv(Utils.realstock_csv, index=False)